// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Form_result.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Form_result TABLE
class TableForm_result extends SqfEntityTableBase {
  TableForm_result() {
    // declare properties of EntityTable
    tableName = 'form_result';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('gender', DbType.text, isNotNull: true),
      SqfEntityFieldBase('external_id', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('operator_physician', DbType.text, isNotNull: true),
      SqfEntityFieldBase('clinical_diagnosis', DbType.text, isNotNull: true),
      SqfEntityFieldBase('birth_year', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('referring_physician', DbType.text, isNotNull: true),
      SqfEntityFieldBase('date', DbType.date,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('BSA', DbType.text, isNotNull: true),
      SqfEntityFieldBase('left_atrium', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('aortic_root', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('LVD_d', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('LVD_s', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('EF_global', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('EF_simpon', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('IVS_d', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('PW_d', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('RVD_d', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('TAPSE', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('LVEDV', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('LVESV', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('left_ventricle', DbType.text, isNotNull: true),
      SqfEntityFieldBase('global_LV_systolic_function', DbType.text,
          isNotNull: true),
      SqfEntityFieldBase('global_RV_systolic_function', DbType.text,
          isNotNull: true),
      SqfEntityFieldBase('segmental_systolic_function', DbType.text,
          isNotNull: true),
      SqfEntityFieldBase('diastolic_function', DbType.text, isNotNull: true),
      SqfEntityFieldBase('LA', DbType.text, isNotNull: true),
      SqfEntityFieldBase('RV', DbType.text, isNotNull: true),
      SqfEntityFieldBase('RA', DbType.text, isNotNull: true),
      SqfEntityFieldBase('mitral_valve', DbType.text, isNotNull: true),
      SqfEntityFieldBase('aortic_valve', DbType.text, isNotNull: true),
      SqfEntityFieldBase('aortic_valve_anulus', DbType.integer,
          isNotNull: true),
      SqfEntityFieldBase('aortic_valve_PG', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('aortic_valve_MG', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('tricuspid_valve', DbType.text, isNotNull: true),
      SqfEntityFieldBase('tricuspid_valve_PAPs', DbType.integer,
          isNotNull: true),
      SqfEntityFieldBase('tricuspid_valve_TRG', DbType.integer,
          isNotNull: true),
      SqfEntityFieldBase('pulmonarv_valve', DbType.text, isNotNull: true),
      SqfEntityFieldBase('pulmonarv_valve_PG', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('interatrial_septum', DbType.text, isNotNull: true),
      SqfEntityFieldBase('interventricular_septum', DbType.text,
          isNotNull: true),
      SqfEntityFieldBase('pericardium', DbType.text, isNotNull: true),
      SqfEntityFieldBase('ascending_aorta', DbType.text, isNotNull: true),
      SqfEntityFieldBase('ascending_aorta_value', DbType.integer,
          isNotNull: true),
      SqfEntityFieldBase('aortic_arch', DbType.text, isNotNull: true),
      SqfEntityFieldBase('desending_aorta', DbType.text, isNotNull: true),
      SqfEntityFieldBase('conclusion', DbType.text, isNotNull: true),
      SqfEntityFieldBase('recommendation', DbType.text, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableForm_result();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableForm_result.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['form_result'] = Form_resultController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Form_result
class Form_result extends TableBase {
  Form_result(
      {this.id,
      this.name,
      this.gender,
      this.external_id,
      this.operator_physician,
      this.clinical_diagnosis,
      this.birth_year,
      this.referring_physician,
      this.date,
      this.BSA,
      this.left_atrium,
      this.aortic_root,
      this.LVD_d,
      this.LVD_s,
      this.EF_global,
      this.EF_simpon,
      this.IVS_d,
      this.PW_d,
      this.RVD_d,
      this.TAPSE,
      this.LVEDV,
      this.LVESV,
      this.left_ventricle,
      this.global_LV_systolic_function,
      this.global_RV_systolic_function,
      this.segmental_systolic_function,
      this.diastolic_function,
      this.LA,
      this.RV,
      this.RA,
      this.mitral_valve,
      this.aortic_valve,
      this.aortic_valve_anulus,
      this.aortic_valve_PG,
      this.aortic_valve_MG,
      this.tricuspid_valve,
      this.tricuspid_valve_PAPs,
      this.tricuspid_valve_TRG,
      this.pulmonarv_valve,
      this.pulmonarv_valve_PG,
      this.interatrial_septum,
      this.interventricular_septum,
      this.pericardium,
      this.ascending_aorta,
      this.ascending_aorta_value,
      this.aortic_arch,
      this.desending_aorta,
      this.conclusion,
      this.recommendation,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Form_result.withFields(
      this.name,
      this.gender,
      this.external_id,
      this.operator_physician,
      this.clinical_diagnosis,
      this.birth_year,
      this.referring_physician,
      this.date,
      this.BSA,
      this.left_atrium,
      this.aortic_root,
      this.LVD_d,
      this.LVD_s,
      this.EF_global,
      this.EF_simpon,
      this.IVS_d,
      this.PW_d,
      this.RVD_d,
      this.TAPSE,
      this.LVEDV,
      this.LVESV,
      this.left_ventricle,
      this.global_LV_systolic_function,
      this.global_RV_systolic_function,
      this.segmental_systolic_function,
      this.diastolic_function,
      this.LA,
      this.RV,
      this.RA,
      this.mitral_valve,
      this.aortic_valve,
      this.aortic_valve_anulus,
      this.aortic_valve_PG,
      this.aortic_valve_MG,
      this.tricuspid_valve,
      this.tricuspid_valve_PAPs,
      this.tricuspid_valve_TRG,
      this.pulmonarv_valve,
      this.pulmonarv_valve_PG,
      this.interatrial_septum,
      this.interventricular_septum,
      this.pericardium,
      this.ascending_aorta,
      this.ascending_aorta_value,
      this.aortic_arch,
      this.desending_aorta,
      this.conclusion,
      this.recommendation,
      this.isDeleted) {
    _setDefaultValues();
  }
  Form_result.withId(
      this.id,
      this.name,
      this.gender,
      this.external_id,
      this.operator_physician,
      this.clinical_diagnosis,
      this.birth_year,
      this.referring_physician,
      this.date,
      this.BSA,
      this.left_atrium,
      this.aortic_root,
      this.LVD_d,
      this.LVD_s,
      this.EF_global,
      this.EF_simpon,
      this.IVS_d,
      this.PW_d,
      this.RVD_d,
      this.TAPSE,
      this.LVEDV,
      this.LVESV,
      this.left_ventricle,
      this.global_LV_systolic_function,
      this.global_RV_systolic_function,
      this.segmental_systolic_function,
      this.diastolic_function,
      this.LA,
      this.RV,
      this.RA,
      this.mitral_valve,
      this.aortic_valve,
      this.aortic_valve_anulus,
      this.aortic_valve_PG,
      this.aortic_valve_MG,
      this.tricuspid_valve,
      this.tricuspid_valve_PAPs,
      this.tricuspid_valve_TRG,
      this.pulmonarv_valve,
      this.pulmonarv_valve_PG,
      this.interatrial_septum,
      this.interventricular_septum,
      this.pericardium,
      this.ascending_aorta,
      this.ascending_aorta_value,
      this.aortic_arch,
      this.desending_aorta,
      this.conclusion,
      this.recommendation,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Form_result.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['gender'] != null) {
      gender = o['gender'].toString();
    }
    if (o['external_id'] != null) {
      external_id = int.tryParse(o['external_id'].toString());
    }
    if (o['operator_physician'] != null) {
      operator_physician = o['operator_physician'].toString();
    }
    if (o['clinical_diagnosis'] != null) {
      clinical_diagnosis = o['clinical_diagnosis'].toString();
    }
    if (o['birth_year'] != null) {
      birth_year = int.tryParse(o['birth_year'].toString());
    }
    if (o['referring_physician'] != null) {
      referring_physician = o['referring_physician'].toString();
    }
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    if (o['BSA'] != null) {
      BSA = o['BSA'].toString();
    }
    if (o['left_atrium'] != null) {
      left_atrium = int.tryParse(o['left_atrium'].toString());
    }
    if (o['aortic_root'] != null) {
      aortic_root = int.tryParse(o['aortic_root'].toString());
    }
    if (o['LVD_d'] != null) {
      LVD_d = int.tryParse(o['LVD_d'].toString());
    }
    if (o['LVD_s'] != null) {
      LVD_s = int.tryParse(o['LVD_s'].toString());
    }
    if (o['EF_global'] != null) {
      EF_global = int.tryParse(o['EF_global'].toString());
    }
    if (o['EF_simpon'] != null) {
      EF_simpon = int.tryParse(o['EF_simpon'].toString());
    }
    if (o['IVS_d'] != null) {
      IVS_d = int.tryParse(o['IVS_d'].toString());
    }
    if (o['PW_d'] != null) {
      PW_d = int.tryParse(o['PW_d'].toString());
    }
    if (o['RVD_d'] != null) {
      RVD_d = int.tryParse(o['RVD_d'].toString());
    }
    if (o['TAPSE'] != null) {
      TAPSE = int.tryParse(o['TAPSE'].toString());
    }
    if (o['LVEDV'] != null) {
      LVEDV = int.tryParse(o['LVEDV'].toString());
    }
    if (o['LVESV'] != null) {
      LVESV = int.tryParse(o['LVESV'].toString());
    }
    if (o['left_ventricle'] != null) {
      left_ventricle = o['left_ventricle'].toString();
    }
    if (o['global_LV_systolic_function'] != null) {
      global_LV_systolic_function = o['global_LV_systolic_function'].toString();
    }
    if (o['global_RV_systolic_function'] != null) {
      global_RV_systolic_function = o['global_RV_systolic_function'].toString();
    }
    if (o['segmental_systolic_function'] != null) {
      segmental_systolic_function = o['segmental_systolic_function'].toString();
    }
    if (o['diastolic_function'] != null) {
      diastolic_function = o['diastolic_function'].toString();
    }
    if (o['LA'] != null) {
      LA = o['LA'].toString();
    }
    if (o['RV'] != null) {
      RV = o['RV'].toString();
    }
    if (o['RA'] != null) {
      RA = o['RA'].toString();
    }
    if (o['mitral_valve'] != null) {
      mitral_valve = o['mitral_valve'].toString();
    }
    if (o['aortic_valve'] != null) {
      aortic_valve = o['aortic_valve'].toString();
    }
    if (o['aortic_valve_anulus'] != null) {
      aortic_valve_anulus = int.tryParse(o['aortic_valve_anulus'].toString());
    }
    if (o['aortic_valve_PG'] != null) {
      aortic_valve_PG = int.tryParse(o['aortic_valve_PG'].toString());
    }
    if (o['aortic_valve_MG'] != null) {
      aortic_valve_MG = int.tryParse(o['aortic_valve_MG'].toString());
    }
    if (o['tricuspid_valve'] != null) {
      tricuspid_valve = o['tricuspid_valve'].toString();
    }
    if (o['tricuspid_valve_PAPs'] != null) {
      tricuspid_valve_PAPs = int.tryParse(o['tricuspid_valve_PAPs'].toString());
    }
    if (o['tricuspid_valve_TRG'] != null) {
      tricuspid_valve_TRG = int.tryParse(o['tricuspid_valve_TRG'].toString());
    }
    if (o['pulmonarv_valve'] != null) {
      pulmonarv_valve = o['pulmonarv_valve'].toString();
    }
    if (o['pulmonarv_valve_PG'] != null) {
      pulmonarv_valve_PG = int.tryParse(o['pulmonarv_valve_PG'].toString());
    }
    if (o['interatrial_septum'] != null) {
      interatrial_septum = o['interatrial_septum'].toString();
    }
    if (o['interventricular_septum'] != null) {
      interventricular_septum = o['interventricular_septum'].toString();
    }
    if (o['pericardium'] != null) {
      pericardium = o['pericardium'].toString();
    }
    if (o['ascending_aorta'] != null) {
      ascending_aorta = o['ascending_aorta'].toString();
    }
    if (o['ascending_aorta_value'] != null) {
      ascending_aorta_value =
          int.tryParse(o['ascending_aorta_value'].toString());
    }
    if (o['aortic_arch'] != null) {
      aortic_arch = o['aortic_arch'].toString();
    }
    if (o['desending_aorta'] != null) {
      desending_aorta = o['desending_aorta'].toString();
    }
    if (o['conclusion'] != null) {
      conclusion = o['conclusion'].toString();
    }
    if (o['recommendation'] != null) {
      recommendation = o['recommendation'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Form_result)
  int? id;
  String? name;
  String? gender;
  int? external_id;
  String? operator_physician;
  String? clinical_diagnosis;
  int? birth_year;
  String? referring_physician;
  DateTime? date;
  String? BSA;
  int? left_atrium;
  int? aortic_root;
  int? LVD_d;
  int? LVD_s;
  int? EF_global;
  int? EF_simpon;
  int? IVS_d;
  int? PW_d;
  int? RVD_d;
  int? TAPSE;
  int? LVEDV;
  int? LVESV;
  String? left_ventricle;
  String? global_LV_systolic_function;
  String? global_RV_systolic_function;
  String? segmental_systolic_function;
  String? diastolic_function;
  String? LA;
  String? RV;
  String? RA;
  String? mitral_valve;
  String? aortic_valve;
  int? aortic_valve_anulus;
  int? aortic_valve_PG;
  int? aortic_valve_MG;
  String? tricuspid_valve;
  int? tricuspid_valve_PAPs;
  int? tricuspid_valve_TRG;
  String? pulmonarv_valve;
  int? pulmonarv_valve_PG;
  String? interatrial_septum;
  String? interventricular_septum;
  String? pericardium;
  String? ascending_aorta;
  int? ascending_aorta_value;
  String? aortic_arch;
  String? desending_aorta;
  String? conclusion;
  String? recommendation;
  bool? isDeleted;

  // end FIELDS (Form_result)

  static const bool _softDeleteActivated = true;
  Form_resultManager? __mnForm_result;

  Form_resultManager get _mnForm_result {
    return __mnForm_result = __mnForm_result ?? Form_resultManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (gender != null || !forView) {
      map['gender'] = gender;
    }
    if (external_id != null || !forView) {
      map['external_id'] = external_id;
    }
    if (operator_physician != null || !forView) {
      map['operator_physician'] = operator_physician;
    }
    if (clinical_diagnosis != null || !forView) {
      map['clinical_diagnosis'] = clinical_diagnosis;
    }
    if (birth_year != null || !forView) {
      map['birth_year'] = birth_year;
    }
    if (referring_physician != null || !forView) {
      map['referring_physician'] = referring_physician;
    }
    if (date != null) {
      map['date'] = forJson
          ? '$date!.year-$date!.month-$date!.day'
          : forQuery
              ? DateTime(date!.year, date!.month, date!.day)
                  .millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (BSA != null || !forView) {
      map['BSA'] = BSA;
    }
    if (left_atrium != null || !forView) {
      map['left_atrium'] = left_atrium;
    }
    if (aortic_root != null || !forView) {
      map['aortic_root'] = aortic_root;
    }
    if (LVD_d != null || !forView) {
      map['LVD_d'] = LVD_d;
    }
    if (LVD_s != null || !forView) {
      map['LVD_s'] = LVD_s;
    }
    if (EF_global != null || !forView) {
      map['EF_global'] = EF_global;
    }
    if (EF_simpon != null || !forView) {
      map['EF_simpon'] = EF_simpon;
    }
    if (IVS_d != null || !forView) {
      map['IVS_d'] = IVS_d;
    }
    if (PW_d != null || !forView) {
      map['PW_d'] = PW_d;
    }
    if (RVD_d != null || !forView) {
      map['RVD_d'] = RVD_d;
    }
    if (TAPSE != null || !forView) {
      map['TAPSE'] = TAPSE;
    }
    if (LVEDV != null || !forView) {
      map['LVEDV'] = LVEDV;
    }
    if (LVESV != null || !forView) {
      map['LVESV'] = LVESV;
    }
    if (left_ventricle != null || !forView) {
      map['left_ventricle'] = left_ventricle;
    }
    if (global_LV_systolic_function != null || !forView) {
      map['global_LV_systolic_function'] = global_LV_systolic_function;
    }
    if (global_RV_systolic_function != null || !forView) {
      map['global_RV_systolic_function'] = global_RV_systolic_function;
    }
    if (segmental_systolic_function != null || !forView) {
      map['segmental_systolic_function'] = segmental_systolic_function;
    }
    if (diastolic_function != null || !forView) {
      map['diastolic_function'] = diastolic_function;
    }
    if (LA != null || !forView) {
      map['LA'] = LA;
    }
    if (RV != null || !forView) {
      map['RV'] = RV;
    }
    if (RA != null || !forView) {
      map['RA'] = RA;
    }
    if (mitral_valve != null || !forView) {
      map['mitral_valve'] = mitral_valve;
    }
    if (aortic_valve != null || !forView) {
      map['aortic_valve'] = aortic_valve;
    }
    if (aortic_valve_anulus != null || !forView) {
      map['aortic_valve_anulus'] = aortic_valve_anulus;
    }
    if (aortic_valve_PG != null || !forView) {
      map['aortic_valve_PG'] = aortic_valve_PG;
    }
    if (aortic_valve_MG != null || !forView) {
      map['aortic_valve_MG'] = aortic_valve_MG;
    }
    if (tricuspid_valve != null || !forView) {
      map['tricuspid_valve'] = tricuspid_valve;
    }
    if (tricuspid_valve_PAPs != null || !forView) {
      map['tricuspid_valve_PAPs'] = tricuspid_valve_PAPs;
    }
    if (tricuspid_valve_TRG != null || !forView) {
      map['tricuspid_valve_TRG'] = tricuspid_valve_TRG;
    }
    if (pulmonarv_valve != null || !forView) {
      map['pulmonarv_valve'] = pulmonarv_valve;
    }
    if (pulmonarv_valve_PG != null || !forView) {
      map['pulmonarv_valve_PG'] = pulmonarv_valve_PG;
    }
    if (interatrial_septum != null || !forView) {
      map['interatrial_septum'] = interatrial_septum;
    }
    if (interventricular_septum != null || !forView) {
      map['interventricular_septum'] = interventricular_septum;
    }
    if (pericardium != null || !forView) {
      map['pericardium'] = pericardium;
    }
    if (ascending_aorta != null || !forView) {
      map['ascending_aorta'] = ascending_aorta;
    }
    if (ascending_aorta_value != null || !forView) {
      map['ascending_aorta_value'] = ascending_aorta_value;
    }
    if (aortic_arch != null || !forView) {
      map['aortic_arch'] = aortic_arch;
    }
    if (desending_aorta != null || !forView) {
      map['desending_aorta'] = desending_aorta;
    }
    if (conclusion != null || !forView) {
      map['conclusion'] = conclusion;
    }
    if (recommendation != null || !forView) {
      map['recommendation'] = recommendation;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (gender != null || !forView) {
      map['gender'] = gender;
    }
    if (external_id != null || !forView) {
      map['external_id'] = external_id;
    }
    if (operator_physician != null || !forView) {
      map['operator_physician'] = operator_physician;
    }
    if (clinical_diagnosis != null || !forView) {
      map['clinical_diagnosis'] = clinical_diagnosis;
    }
    if (birth_year != null || !forView) {
      map['birth_year'] = birth_year;
    }
    if (referring_physician != null || !forView) {
      map['referring_physician'] = referring_physician;
    }
    if (date != null) {
      map['date'] = forJson
          ? '$date!.year-$date!.month-$date!.day'
          : forQuery
              ? DateTime(date!.year, date!.month, date!.day)
                  .millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (BSA != null || !forView) {
      map['BSA'] = BSA;
    }
    if (left_atrium != null || !forView) {
      map['left_atrium'] = left_atrium;
    }
    if (aortic_root != null || !forView) {
      map['aortic_root'] = aortic_root;
    }
    if (LVD_d != null || !forView) {
      map['LVD_d'] = LVD_d;
    }
    if (LVD_s != null || !forView) {
      map['LVD_s'] = LVD_s;
    }
    if (EF_global != null || !forView) {
      map['EF_global'] = EF_global;
    }
    if (EF_simpon != null || !forView) {
      map['EF_simpon'] = EF_simpon;
    }
    if (IVS_d != null || !forView) {
      map['IVS_d'] = IVS_d;
    }
    if (PW_d != null || !forView) {
      map['PW_d'] = PW_d;
    }
    if (RVD_d != null || !forView) {
      map['RVD_d'] = RVD_d;
    }
    if (TAPSE != null || !forView) {
      map['TAPSE'] = TAPSE;
    }
    if (LVEDV != null || !forView) {
      map['LVEDV'] = LVEDV;
    }
    if (LVESV != null || !forView) {
      map['LVESV'] = LVESV;
    }
    if (left_ventricle != null || !forView) {
      map['left_ventricle'] = left_ventricle;
    }
    if (global_LV_systolic_function != null || !forView) {
      map['global_LV_systolic_function'] = global_LV_systolic_function;
    }
    if (global_RV_systolic_function != null || !forView) {
      map['global_RV_systolic_function'] = global_RV_systolic_function;
    }
    if (segmental_systolic_function != null || !forView) {
      map['segmental_systolic_function'] = segmental_systolic_function;
    }
    if (diastolic_function != null || !forView) {
      map['diastolic_function'] = diastolic_function;
    }
    if (LA != null || !forView) {
      map['LA'] = LA;
    }
    if (RV != null || !forView) {
      map['RV'] = RV;
    }
    if (RA != null || !forView) {
      map['RA'] = RA;
    }
    if (mitral_valve != null || !forView) {
      map['mitral_valve'] = mitral_valve;
    }
    if (aortic_valve != null || !forView) {
      map['aortic_valve'] = aortic_valve;
    }
    if (aortic_valve_anulus != null || !forView) {
      map['aortic_valve_anulus'] = aortic_valve_anulus;
    }
    if (aortic_valve_PG != null || !forView) {
      map['aortic_valve_PG'] = aortic_valve_PG;
    }
    if (aortic_valve_MG != null || !forView) {
      map['aortic_valve_MG'] = aortic_valve_MG;
    }
    if (tricuspid_valve != null || !forView) {
      map['tricuspid_valve'] = tricuspid_valve;
    }
    if (tricuspid_valve_PAPs != null || !forView) {
      map['tricuspid_valve_PAPs'] = tricuspid_valve_PAPs;
    }
    if (tricuspid_valve_TRG != null || !forView) {
      map['tricuspid_valve_TRG'] = tricuspid_valve_TRG;
    }
    if (pulmonarv_valve != null || !forView) {
      map['pulmonarv_valve'] = pulmonarv_valve;
    }
    if (pulmonarv_valve_PG != null || !forView) {
      map['pulmonarv_valve_PG'] = pulmonarv_valve_PG;
    }
    if (interatrial_septum != null || !forView) {
      map['interatrial_septum'] = interatrial_septum;
    }
    if (interventricular_septum != null || !forView) {
      map['interventricular_septum'] = interventricular_septum;
    }
    if (pericardium != null || !forView) {
      map['pericardium'] = pericardium;
    }
    if (ascending_aorta != null || !forView) {
      map['ascending_aorta'] = ascending_aorta;
    }
    if (ascending_aorta_value != null || !forView) {
      map['ascending_aorta_value'] = ascending_aorta_value;
    }
    if (aortic_arch != null || !forView) {
      map['aortic_arch'] = aortic_arch;
    }
    if (desending_aorta != null || !forView) {
      map['desending_aorta'] = desending_aorta;
    }
    if (conclusion != null || !forView) {
      map['conclusion'] = conclusion;
    }
    if (recommendation != null || !forView) {
      map['recommendation'] = recommendation;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Form_result]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Form_result]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      name,
      gender,
      external_id,
      operator_physician,
      clinical_diagnosis,
      birth_year,
      referring_physician,
      date != null ? date!.millisecondsSinceEpoch : null,
      BSA,
      left_atrium,
      aortic_root,
      LVD_d,
      LVD_s,
      EF_global,
      EF_simpon,
      IVS_d,
      PW_d,
      RVD_d,
      TAPSE,
      LVEDV,
      LVESV,
      left_ventricle,
      global_LV_systolic_function,
      global_RV_systolic_function,
      segmental_systolic_function,
      diastolic_function,
      LA,
      RV,
      RA,
      mitral_valve,
      aortic_valve,
      aortic_valve_anulus,
      aortic_valve_PG,
      aortic_valve_MG,
      tricuspid_valve,
      tricuspid_valve_PAPs,
      tricuspid_valve_TRG,
      pulmonarv_valve,
      pulmonarv_valve_PG,
      interatrial_septum,
      interventricular_septum,
      pericardium,
      ascending_aorta,
      ascending_aorta_value,
      aortic_arch,
      desending_aorta,
      conclusion,
      recommendation,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      gender,
      external_id,
      operator_physician,
      clinical_diagnosis,
      birth_year,
      referring_physician,
      date != null ? date!.millisecondsSinceEpoch : null,
      BSA,
      left_atrium,
      aortic_root,
      LVD_d,
      LVD_s,
      EF_global,
      EF_simpon,
      IVS_d,
      PW_d,
      RVD_d,
      TAPSE,
      LVEDV,
      LVESV,
      left_ventricle,
      global_LV_systolic_function,
      global_RV_systolic_function,
      segmental_systolic_function,
      diastolic_function,
      LA,
      RV,
      RA,
      mitral_valve,
      aortic_valve,
      aortic_valve_anulus,
      aortic_valve_PG,
      aortic_valve_MG,
      tricuspid_valve,
      tricuspid_valve_PAPs,
      tricuspid_valve_TRG,
      pulmonarv_valve,
      pulmonarv_valve_PG,
      interatrial_septum,
      interventricular_septum,
      pericardium,
      ascending_aorta,
      ascending_aorta_value,
      aortic_arch,
      desending_aorta,
      conclusion,
      recommendation,
      isDeleted
    ];
  }

  static Future<List<Form_result>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Form_result.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Form_result>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Form_result>[];
    try {
      objList = list
          .map((form_result) =>
              Form_result.fromMap(form_result as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Form_result.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Form_result>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Form_result> objList = <Form_result>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Form_result.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Form_result by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Form_result] if exist, otherwise returns null
  Future<Form_result?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Form_result? obj;
    final data = await _mnForm_result.getById([id]);
    if (data.length != 0) {
      obj = Form_result.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Form_result) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnForm_result.insert(this, ignoreBatch);
    } else {
      await _mnForm_result.update(this);
    }

    return id;
  }

  /// Saves the (Form_result) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnForm_result.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnForm_result.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Form_result. Returns a new Primary Key value of Form_result

  /// <returns>Returns a new Primary Key value of Form_result
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Form_result> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Form_result> form_results,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in form_results) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < form_results.length; i++) {
        if (form_results[i].id == null) {
          form_results[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnForm_result.rawInsert(
          'INSERT OR REPLACE INTO form_result (id, name, gender, external_id, operator_physician, clinical_diagnosis, birth_year, referring_physician, date, BSA, left_atrium, aortic_root, LVD_d, LVD_s, EF_global, EF_simpon, IVS_d, PW_d, RVD_d, TAPSE, LVEDV, LVESV, left_ventricle, global_LV_systolic_function, global_RV_systolic_function, segmental_systolic_function, diastolic_function, LA, RV, RA, mitral_valve, aortic_valve, aortic_valve_anulus, aortic_valve_PG, aortic_valve_MG, tricuspid_valve, tricuspid_valve_PAPs, tricuspid_valve_TRG, pulmonarv_valve, pulmonarv_valve_PG, interatrial_septum, interventricular_septum, pericardium, ascending_aorta, ascending_aorta_value, aortic_arch, desending_aorta, conclusion, recommendation,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            name,
            gender,
            external_id,
            operator_physician,
            clinical_diagnosis,
            birth_year,
            referring_physician,
            date != null ? date!.millisecondsSinceEpoch : null,
            BSA,
            left_atrium,
            aortic_root,
            LVD_d,
            LVD_s,
            EF_global,
            EF_simpon,
            IVS_d,
            PW_d,
            RVD_d,
            TAPSE,
            LVEDV,
            LVESV,
            left_ventricle,
            global_LV_systolic_function,
            global_RV_systolic_function,
            segmental_systolic_function,
            diastolic_function,
            LA,
            RV,
            RA,
            mitral_valve,
            aortic_valve,
            aortic_valve_anulus,
            aortic_valve_PG,
            aortic_valve_MG,
            tricuspid_valve,
            tricuspid_valve_PAPs,
            tricuspid_valve_TRG,
            pulmonarv_valve,
            pulmonarv_valve_PG,
            interatrial_septum,
            interventricular_septum,
            pericardium,
            ascending_aorta,
            ascending_aorta_value,
            aortic_arch,
            desending_aorta,
            conclusion,
            recommendation,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Form_result id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Form_result id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Form_result Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Form_result>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Form_result> form_results,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnForm_result.rawInsertAll(
        'INSERT OR REPLACE INTO form_result (id, name, gender, external_id, operator_physician, clinical_diagnosis, birth_year, referring_physician, date, BSA, left_atrium, aortic_root, LVD_d, LVD_s, EF_global, EF_simpon, IVS_d, PW_d, RVD_d, TAPSE, LVEDV, LVESV, left_ventricle, global_LV_systolic_function, global_RV_systolic_function, segmental_systolic_function, diastolic_function, LA, RV, RA, mitral_valve, aortic_valve, aortic_valve_anulus, aortic_valve_PG, aortic_valve_MG, tricuspid_valve, tricuspid_valve_PAPs, tricuspid_valve_TRG, pulmonarv_valve, pulmonarv_valve_PG, interatrial_septum, interventricular_septum, pericardium, ascending_aorta, ascending_aorta_value, aortic_arch, desending_aorta, conclusion, recommendation,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        form_results,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Form_result

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Form_result invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnForm_result
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnForm_result.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Form_result

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Form_result invoked (id=$id)');
    {
      return _mnForm_result.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  Form_resultFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Form_resultFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Form_resultFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Form_resultFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion form_result

// region Form_resultField
class Form_resultField extends FilterBase {
  Form_resultField(Form_resultFilterBuilder form_resultFB)
      : super(form_resultFB);

  @override
  Form_resultFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder isNull() {
    return super.isNull() as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Form_resultFilterBuilder;
  }

  @override
  Form_resultField get not {
    return super.not as Form_resultField;
  }
}
// endregion Form_resultField

// region Form_resultFilterBuilder
class Form_resultFilterBuilder extends ConjunctionBase {
  Form_resultFilterBuilder(Form_result obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnForm_result = obj._mnForm_result;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Form_resultManager? _mnForm_result;

  /// put the sql keyword 'AND'
  @override
  Form_resultFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Form_resultFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Form_resultFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Form_resultFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Form_resultFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Form_resultFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Form_resultFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Form_resultFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Form_resultFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Form_resultFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Form_resultFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Form_resultField _setField(
      Form_resultField? field, String colName, DbType dbtype) {
    return Form_resultField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Form_resultField? _id;
  Form_resultField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  Form_resultField? _name;
  Form_resultField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  Form_resultField? _gender;
  Form_resultField get gender {
    return _gender = _setField(_gender, 'gender', DbType.text);
  }

  Form_resultField? _external_id;
  Form_resultField get external_id {
    return _external_id =
        _setField(_external_id, 'external_id', DbType.integer);
  }

  Form_resultField? _operator_physician;
  Form_resultField get operator_physician {
    return _operator_physician =
        _setField(_operator_physician, 'operator_physician', DbType.text);
  }

  Form_resultField? _clinical_diagnosis;
  Form_resultField get clinical_diagnosis {
    return _clinical_diagnosis =
        _setField(_clinical_diagnosis, 'clinical_diagnosis', DbType.text);
  }

  Form_resultField? _birth_year;
  Form_resultField get birth_year {
    return _birth_year = _setField(_birth_year, 'birth_year', DbType.integer);
  }

  Form_resultField? _referring_physician;
  Form_resultField get referring_physician {
    return _referring_physician =
        _setField(_referring_physician, 'referring_physician', DbType.text);
  }

  Form_resultField? _date;
  Form_resultField get date {
    return _date = _setField(_date, 'date', DbType.date);
  }

  Form_resultField? _BSA;
  Form_resultField get BSA {
    return _BSA = _setField(_BSA, 'BSA', DbType.text);
  }

  Form_resultField? _left_atrium;
  Form_resultField get left_atrium {
    return _left_atrium =
        _setField(_left_atrium, 'left_atrium', DbType.integer);
  }

  Form_resultField? _aortic_root;
  Form_resultField get aortic_root {
    return _aortic_root =
        _setField(_aortic_root, 'aortic_root', DbType.integer);
  }

  Form_resultField? _LVD_d;
  Form_resultField get LVD_d {
    return _LVD_d = _setField(_LVD_d, 'LVD_d', DbType.integer);
  }

  Form_resultField? _LVD_s;
  Form_resultField get LVD_s {
    return _LVD_s = _setField(_LVD_s, 'LVD_s', DbType.integer);
  }

  Form_resultField? _EF_global;
  Form_resultField get EF_global {
    return _EF_global = _setField(_EF_global, 'EF_global', DbType.integer);
  }

  Form_resultField? _EF_simpon;
  Form_resultField get EF_simpon {
    return _EF_simpon = _setField(_EF_simpon, 'EF_simpon', DbType.integer);
  }

  Form_resultField? _IVS_d;
  Form_resultField get IVS_d {
    return _IVS_d = _setField(_IVS_d, 'IVS_d', DbType.integer);
  }

  Form_resultField? _PW_d;
  Form_resultField get PW_d {
    return _PW_d = _setField(_PW_d, 'PW_d', DbType.integer);
  }

  Form_resultField? _RVD_d;
  Form_resultField get RVD_d {
    return _RVD_d = _setField(_RVD_d, 'RVD_d', DbType.integer);
  }

  Form_resultField? _TAPSE;
  Form_resultField get TAPSE {
    return _TAPSE = _setField(_TAPSE, 'TAPSE', DbType.integer);
  }

  Form_resultField? _LVEDV;
  Form_resultField get LVEDV {
    return _LVEDV = _setField(_LVEDV, 'LVEDV', DbType.integer);
  }

  Form_resultField? _LVESV;
  Form_resultField get LVESV {
    return _LVESV = _setField(_LVESV, 'LVESV', DbType.integer);
  }

  Form_resultField? _left_ventricle;
  Form_resultField get left_ventricle {
    return _left_ventricle =
        _setField(_left_ventricle, 'left_ventricle', DbType.text);
  }

  Form_resultField? _global_LV_systolic_function;
  Form_resultField get global_LV_systolic_function {
    return _global_LV_systolic_function = _setField(
        _global_LV_systolic_function,
        'global_LV_systolic_function',
        DbType.text);
  }

  Form_resultField? _global_RV_systolic_function;
  Form_resultField get global_RV_systolic_function {
    return _global_RV_systolic_function = _setField(
        _global_RV_systolic_function,
        'global_RV_systolic_function',
        DbType.text);
  }

  Form_resultField? _segmental_systolic_function;
  Form_resultField get segmental_systolic_function {
    return _segmental_systolic_function = _setField(
        _segmental_systolic_function,
        'segmental_systolic_function',
        DbType.text);
  }

  Form_resultField? _diastolic_function;
  Form_resultField get diastolic_function {
    return _diastolic_function =
        _setField(_diastolic_function, 'diastolic_function', DbType.text);
  }

  Form_resultField? _LA;
  Form_resultField get LA {
    return _LA = _setField(_LA, 'LA', DbType.text);
  }

  Form_resultField? _RV;
  Form_resultField get RV {
    return _RV = _setField(_RV, 'RV', DbType.text);
  }

  Form_resultField? _RA;
  Form_resultField get RA {
    return _RA = _setField(_RA, 'RA', DbType.text);
  }

  Form_resultField? _mitral_valve;
  Form_resultField get mitral_valve {
    return _mitral_valve =
        _setField(_mitral_valve, 'mitral_valve', DbType.text);
  }

  Form_resultField? _aortic_valve;
  Form_resultField get aortic_valve {
    return _aortic_valve =
        _setField(_aortic_valve, 'aortic_valve', DbType.text);
  }

  Form_resultField? _aortic_valve_anulus;
  Form_resultField get aortic_valve_anulus {
    return _aortic_valve_anulus =
        _setField(_aortic_valve_anulus, 'aortic_valve_anulus', DbType.integer);
  }

  Form_resultField? _aortic_valve_PG;
  Form_resultField get aortic_valve_PG {
    return _aortic_valve_PG =
        _setField(_aortic_valve_PG, 'aortic_valve_PG', DbType.integer);
  }

  Form_resultField? _aortic_valve_MG;
  Form_resultField get aortic_valve_MG {
    return _aortic_valve_MG =
        _setField(_aortic_valve_MG, 'aortic_valve_MG', DbType.integer);
  }

  Form_resultField? _tricuspid_valve;
  Form_resultField get tricuspid_valve {
    return _tricuspid_valve =
        _setField(_tricuspid_valve, 'tricuspid_valve', DbType.text);
  }

  Form_resultField? _tricuspid_valve_PAPs;
  Form_resultField get tricuspid_valve_PAPs {
    return _tricuspid_valve_PAPs = _setField(
        _tricuspid_valve_PAPs, 'tricuspid_valve_PAPs', DbType.integer);
  }

  Form_resultField? _tricuspid_valve_TRG;
  Form_resultField get tricuspid_valve_TRG {
    return _tricuspid_valve_TRG =
        _setField(_tricuspid_valve_TRG, 'tricuspid_valve_TRG', DbType.integer);
  }

  Form_resultField? _pulmonarv_valve;
  Form_resultField get pulmonarv_valve {
    return _pulmonarv_valve =
        _setField(_pulmonarv_valve, 'pulmonarv_valve', DbType.text);
  }

  Form_resultField? _pulmonarv_valve_PG;
  Form_resultField get pulmonarv_valve_PG {
    return _pulmonarv_valve_PG =
        _setField(_pulmonarv_valve_PG, 'pulmonarv_valve_PG', DbType.integer);
  }

  Form_resultField? _interatrial_septum;
  Form_resultField get interatrial_septum {
    return _interatrial_septum =
        _setField(_interatrial_septum, 'interatrial_septum', DbType.text);
  }

  Form_resultField? _interventricular_septum;
  Form_resultField get interventricular_septum {
    return _interventricular_septum = _setField(
        _interventricular_septum, 'interventricular_septum', DbType.text);
  }

  Form_resultField? _pericardium;
  Form_resultField get pericardium {
    return _pericardium = _setField(_pericardium, 'pericardium', DbType.text);
  }

  Form_resultField? _ascending_aorta;
  Form_resultField get ascending_aorta {
    return _ascending_aorta =
        _setField(_ascending_aorta, 'ascending_aorta', DbType.text);
  }

  Form_resultField? _ascending_aorta_value;
  Form_resultField get ascending_aorta_value {
    return _ascending_aorta_value = _setField(
        _ascending_aorta_value, 'ascending_aorta_value', DbType.integer);
  }

  Form_resultField? _aortic_arch;
  Form_resultField get aortic_arch {
    return _aortic_arch = _setField(_aortic_arch, 'aortic_arch', DbType.text);
  }

  Form_resultField? _desending_aorta;
  Form_resultField get desending_aorta {
    return _desending_aorta =
        _setField(_desending_aorta, 'desending_aorta', DbType.text);
  }

  Form_resultField? _conclusion;
  Form_resultField get conclusion {
    return _conclusion = _setField(_conclusion, 'conclusion', DbType.text);
  }

  Form_resultField? _recommendation;
  Form_resultField get recommendation {
    return _recommendation =
        _setField(_recommendation, 'recommendation', DbType.text);
  }

  Form_resultField? _isDeleted;
  Form_resultField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Form_result> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnForm_result!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnForm_result!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Form_result> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Form_result bulk invoked');
    return _mnForm_result!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from form_result ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnForm_result!.updateBatch(qparams, values);
  }

  /// This method always returns [Form_result] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Form_result?
  @override
  Future<Form_result?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnForm_result!.toList(qparams);
    final data = await objFuture;
    Form_result? obj;
    if (data.isNotEmpty) {
      obj = Form_result.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Form_result]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Form_result?
  @override
  Future<Form_result> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Form_result();
  }

  /// This method returns int. [Form_result]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? form_resultCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final form_resultsFuture = await _mnForm_result!.toList(qparams);
    final int count = form_resultsFuture[0]['CNT'] as int;
    if (form_resultCount != null) {
      form_resultCount(count);
    }
    return count;
  }

  /// This method returns List<Form_result> [Form_result]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Form_result>
  @override
  Future<List<Form_result>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Form_result> form_resultsData = await Form_result.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return form_resultsData;
  }

  /// This method returns Json String [Form_result]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Form_result]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Form_result]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnForm_result!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Form_result>>
  Future<List<DropdownMenuItem<Form_result>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Form_result>> o)?
          dropDownMenu]) async {
    buildParameters();
    final form_resultsFuture = _mnForm_result!.toList(qparams);

    final data = await form_resultsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Form_result>> items = []..add(DropdownMenuItem(
        value: Form_result(),
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Form_result.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final form_resultsFuture = _mnForm_result!.toList(qparams);

    final data = await form_resultsFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('-'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Form_result]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM form_result WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnForm_result!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Form_result]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnForm_result!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Form_result.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnForm_result!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Form_resultFilterBuilder

// region Form_resultFields
class Form_resultFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fGender;
  static TableField get gender {
    return _fGender =
        _fGender ?? SqlSyntax.setField(_fGender, 'gender', DbType.text);
  }

  static TableField? _fExternal_id;
  static TableField get external_id {
    return _fExternal_id = _fExternal_id ??
        SqlSyntax.setField(_fExternal_id, 'external_id', DbType.integer);
  }

  static TableField? _fOperator_physician;
  static TableField get operator_physician {
    return _fOperator_physician = _fOperator_physician ??
        SqlSyntax.setField(
            _fOperator_physician, 'operator_physician', DbType.text);
  }

  static TableField? _fClinical_diagnosis;
  static TableField get clinical_diagnosis {
    return _fClinical_diagnosis = _fClinical_diagnosis ??
        SqlSyntax.setField(
            _fClinical_diagnosis, 'clinical_diagnosis', DbType.text);
  }

  static TableField? _fBirth_year;
  static TableField get birth_year {
    return _fBirth_year = _fBirth_year ??
        SqlSyntax.setField(_fBirth_year, 'birth_year', DbType.integer);
  }

  static TableField? _fReferring_physician;
  static TableField get referring_physician {
    return _fReferring_physician = _fReferring_physician ??
        SqlSyntax.setField(
            _fReferring_physician, 'referring_physician', DbType.text);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate = _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.date);
  }

  static TableField? _fBSA;
  static TableField get BSA {
    return _fBSA = _fBSA ?? SqlSyntax.setField(_fBSA, 'BSA', DbType.text);
  }

  static TableField? _fLeft_atrium;
  static TableField get left_atrium {
    return _fLeft_atrium = _fLeft_atrium ??
        SqlSyntax.setField(_fLeft_atrium, 'left_atrium', DbType.integer);
  }

  static TableField? _fAortic_root;
  static TableField get aortic_root {
    return _fAortic_root = _fAortic_root ??
        SqlSyntax.setField(_fAortic_root, 'aortic_root', DbType.integer);
  }

  static TableField? _fLVD_d;
  static TableField get LVD_d {
    return _fLVD_d =
        _fLVD_d ?? SqlSyntax.setField(_fLVD_d, 'LVD_d', DbType.integer);
  }

  static TableField? _fLVD_s;
  static TableField get LVD_s {
    return _fLVD_s =
        _fLVD_s ?? SqlSyntax.setField(_fLVD_s, 'LVD_s', DbType.integer);
  }

  static TableField? _fEF_global;
  static TableField get EF_global {
    return _fEF_global = _fEF_global ??
        SqlSyntax.setField(_fEF_global, 'EF_global', DbType.integer);
  }

  static TableField? _fEF_simpon;
  static TableField get EF_simpon {
    return _fEF_simpon = _fEF_simpon ??
        SqlSyntax.setField(_fEF_simpon, 'EF_simpon', DbType.integer);
  }

  static TableField? _fIVS_d;
  static TableField get IVS_d {
    return _fIVS_d =
        _fIVS_d ?? SqlSyntax.setField(_fIVS_d, 'IVS_d', DbType.integer);
  }

  static TableField? _fPW_d;
  static TableField get PW_d {
    return _fPW_d =
        _fPW_d ?? SqlSyntax.setField(_fPW_d, 'PW_d', DbType.integer);
  }

  static TableField? _fRVD_d;
  static TableField get RVD_d {
    return _fRVD_d =
        _fRVD_d ?? SqlSyntax.setField(_fRVD_d, 'RVD_d', DbType.integer);
  }

  static TableField? _fTAPSE;
  static TableField get TAPSE {
    return _fTAPSE =
        _fTAPSE ?? SqlSyntax.setField(_fTAPSE, 'TAPSE', DbType.integer);
  }

  static TableField? _fLVEDV;
  static TableField get LVEDV {
    return _fLVEDV =
        _fLVEDV ?? SqlSyntax.setField(_fLVEDV, 'LVEDV', DbType.integer);
  }

  static TableField? _fLVESV;
  static TableField get LVESV {
    return _fLVESV =
        _fLVESV ?? SqlSyntax.setField(_fLVESV, 'LVESV', DbType.integer);
  }

  static TableField? _fLeft_ventricle;
  static TableField get left_ventricle {
    return _fLeft_ventricle = _fLeft_ventricle ??
        SqlSyntax.setField(_fLeft_ventricle, 'left_ventricle', DbType.text);
  }

  static TableField? _fGlobal_LV_systolic_function;
  static TableField get global_LV_systolic_function {
    return _fGlobal_LV_systolic_function = _fGlobal_LV_systolic_function ??
        SqlSyntax.setField(_fGlobal_LV_systolic_function,
            'global_LV_systolic_function', DbType.text);
  }

  static TableField? _fGlobal_RV_systolic_function;
  static TableField get global_RV_systolic_function {
    return _fGlobal_RV_systolic_function = _fGlobal_RV_systolic_function ??
        SqlSyntax.setField(_fGlobal_RV_systolic_function,
            'global_RV_systolic_function', DbType.text);
  }

  static TableField? _fSegmental_systolic_function;
  static TableField get segmental_systolic_function {
    return _fSegmental_systolic_function = _fSegmental_systolic_function ??
        SqlSyntax.setField(_fSegmental_systolic_function,
            'segmental_systolic_function', DbType.text);
  }

  static TableField? _fDiastolic_function;
  static TableField get diastolic_function {
    return _fDiastolic_function = _fDiastolic_function ??
        SqlSyntax.setField(
            _fDiastolic_function, 'diastolic_function', DbType.text);
  }

  static TableField? _fLA;
  static TableField get LA {
    return _fLA = _fLA ?? SqlSyntax.setField(_fLA, 'LA', DbType.text);
  }

  static TableField? _fRV;
  static TableField get RV {
    return _fRV = _fRV ?? SqlSyntax.setField(_fRV, 'RV', DbType.text);
  }

  static TableField? _fRA;
  static TableField get RA {
    return _fRA = _fRA ?? SqlSyntax.setField(_fRA, 'RA', DbType.text);
  }

  static TableField? _fMitral_valve;
  static TableField get mitral_valve {
    return _fMitral_valve = _fMitral_valve ??
        SqlSyntax.setField(_fMitral_valve, 'mitral_valve', DbType.text);
  }

  static TableField? _fAortic_valve;
  static TableField get aortic_valve {
    return _fAortic_valve = _fAortic_valve ??
        SqlSyntax.setField(_fAortic_valve, 'aortic_valve', DbType.text);
  }

  static TableField? _fAortic_valve_anulus;
  static TableField get aortic_valve_anulus {
    return _fAortic_valve_anulus = _fAortic_valve_anulus ??
        SqlSyntax.setField(
            _fAortic_valve_anulus, 'aortic_valve_anulus', DbType.integer);
  }

  static TableField? _fAortic_valve_PG;
  static TableField get aortic_valve_PG {
    return _fAortic_valve_PG = _fAortic_valve_PG ??
        SqlSyntax.setField(
            _fAortic_valve_PG, 'aortic_valve_PG', DbType.integer);
  }

  static TableField? _fAortic_valve_MG;
  static TableField get aortic_valve_MG {
    return _fAortic_valve_MG = _fAortic_valve_MG ??
        SqlSyntax.setField(
            _fAortic_valve_MG, 'aortic_valve_MG', DbType.integer);
  }

  static TableField? _fTricuspid_valve;
  static TableField get tricuspid_valve {
    return _fTricuspid_valve = _fTricuspid_valve ??
        SqlSyntax.setField(_fTricuspid_valve, 'tricuspid_valve', DbType.text);
  }

  static TableField? _fTricuspid_valve_PAPs;
  static TableField get tricuspid_valve_PAPs {
    return _fTricuspid_valve_PAPs = _fTricuspid_valve_PAPs ??
        SqlSyntax.setField(
            _fTricuspid_valve_PAPs, 'tricuspid_valve_PAPs', DbType.integer);
  }

  static TableField? _fTricuspid_valve_TRG;
  static TableField get tricuspid_valve_TRG {
    return _fTricuspid_valve_TRG = _fTricuspid_valve_TRG ??
        SqlSyntax.setField(
            _fTricuspid_valve_TRG, 'tricuspid_valve_TRG', DbType.integer);
  }

  static TableField? _fPulmonarv_valve;
  static TableField get pulmonarv_valve {
    return _fPulmonarv_valve = _fPulmonarv_valve ??
        SqlSyntax.setField(_fPulmonarv_valve, 'pulmonarv_valve', DbType.text);
  }

  static TableField? _fPulmonarv_valve_PG;
  static TableField get pulmonarv_valve_PG {
    return _fPulmonarv_valve_PG = _fPulmonarv_valve_PG ??
        SqlSyntax.setField(
            _fPulmonarv_valve_PG, 'pulmonarv_valve_PG', DbType.integer);
  }

  static TableField? _fInteratrial_septum;
  static TableField get interatrial_septum {
    return _fInteratrial_septum = _fInteratrial_septum ??
        SqlSyntax.setField(
            _fInteratrial_septum, 'interatrial_septum', DbType.text);
  }

  static TableField? _fInterventricular_septum;
  static TableField get interventricular_septum {
    return _fInterventricular_septum = _fInterventricular_septum ??
        SqlSyntax.setField(
            _fInterventricular_septum, 'interventricular_septum', DbType.text);
  }

  static TableField? _fPericardium;
  static TableField get pericardium {
    return _fPericardium = _fPericardium ??
        SqlSyntax.setField(_fPericardium, 'pericardium', DbType.text);
  }

  static TableField? _fAscending_aorta;
  static TableField get ascending_aorta {
    return _fAscending_aorta = _fAscending_aorta ??
        SqlSyntax.setField(_fAscending_aorta, 'ascending_aorta', DbType.text);
  }

  static TableField? _fAscending_aorta_value;
  static TableField get ascending_aorta_value {
    return _fAscending_aorta_value = _fAscending_aorta_value ??
        SqlSyntax.setField(
            _fAscending_aorta_value, 'ascending_aorta_value', DbType.integer);
  }

  static TableField? _fAortic_arch;
  static TableField get aortic_arch {
    return _fAortic_arch = _fAortic_arch ??
        SqlSyntax.setField(_fAortic_arch, 'aortic_arch', DbType.text);
  }

  static TableField? _fDesending_aorta;
  static TableField get desending_aorta {
    return _fDesending_aorta = _fDesending_aorta ??
        SqlSyntax.setField(_fDesending_aorta, 'desending_aorta', DbType.text);
  }

  static TableField? _fConclusion;
  static TableField get conclusion {
    return _fConclusion = _fConclusion ??
        SqlSyntax.setField(_fConclusion, 'conclusion', DbType.text);
  }

  static TableField? _fRecommendation;
  static TableField get recommendation {
    return _fRecommendation = _fRecommendation ??
        SqlSyntax.setField(_fRecommendation, 'recommendation', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion Form_resultFields

//region Form_resultManager
class Form_resultManager extends SqfEntityProvider {
  Form_resultManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'form_result';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion Form_resultManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (Form_result)

class Form_resultController extends Form_result {
  String formListTitleField = 'name';
  String formListSubTitleField = 'gender';
  static SQFViewList getController = SQFViewList(
    Form_resultController(),
    primaryKeyName: 'id',
    useSoftDeleting: true,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return Form_resultAdd(obj == null
        ? Form_result()
        : await Form_result().getById(obj['id'] as int) ?? Form_result());
  }
}
// END CONTROLLER (Form_result)

// END OF CONTROLLERS
